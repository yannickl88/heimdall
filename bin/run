#!/usr/bin/php
<?php
require __DIR__ . '/../vendor/autoload.php';

function parseArgs($argv, array $options = [], array $option_values = []) {
    $options['help'] = false;
    $arguments = [];

    // Parse input
    for ($i = 1, $n = count($argv); $i < $n; $i++) {
        if (0 === strpos($argv[$i], '--')) {
            $option = explode('=', substr($argv[$i], 2));

            if (!isset($options[$option[0]])) {
                echo 'Unknown option ', $argv[$i], ".\n";
                exit(1);
            }

            if (in_array($option[0], $option_values, true)) {
                $options[$option[0]] = $option[1] ?? $argv[++$i];
            } else {
                $options[$option[0]] = true;
            }
            continue;
        }

        $arguments[] = $argv[$i];
    }

    return [$options, $arguments];
}

[$options, $arguments] = parseArgs($argv, ['quiet' => false, 'register' => false, 'add' => false]);

if ($options['help']) {
    echo "Usage: run [OPTION]... [FILE|DIRECTORY]\n",
        "Run tasks based on a configuration file.\n",
        "Examples:\n",
        "    run some.site.json\n",
        "    run --quiet some/directory\n",
        "\n",
        "Options to use\n",
        "  --help        Print this help.\n",
        "  --quiet       Does not print any output other than errors.\n";

    exit(0);
}

$datastore = new \Yannickl88\Server\Config\DataStore(
    'heimdal.lock',
    new \Yannickl88\Server\Config\DataStoreSerializer()
);

if ($options['register']) {
    if (count($arguments) !== 1) {
        echo "Wrong number of arguments, expected 1.\n";

        exit(1);
    }

    $repository_url = $arguments[0];
    $token = null;

    echo "Adding \"$repository_url\". Token required.\n";

    try {
        $loader = $datastore->register($repository_url);
        if ($loader->needsToken()) {
            // ask for token
            $token = readline('Token: ');
        }

        $loader->init($token);
    } catch (\RuntimeException $e) {
        echo 'Error! ', $e->getMessage(), "\n";

        exit(1);
    }

    $datastore->save();

    echo "Repository has been registered.\n";

    exit(0);
}

if ($options['add']) {
    if (count($arguments) !== 1) {
        echo "Wrong number of arguments, expected 1.\n";

        exit(1);
    }

    $identifier = $arguments[0];

    try {
        $loader = $datastore->add($identifier);
    } catch (\RuntimeException $e) {
        echo 'Error! ', $e->getMessage(), "\n";

        exit(1);
    }

    $possible_repositories = $loader->getRepositories();

    if (count($possible_repositories) === 0) {
        echo "No repository found which contains \"$identifier\".\n";

        exit(1);
    }

    $selected_repository = null;

    if (count($possible_repositories) === 1) {
        $selected_repository = $possible_repositories[0];
    } else {
        do {
            echo "Multiple repositories found which have configuration for \"$identifier\".\n",
                "Which one do you want to use?\n";
            foreach ($possible_repositories as $i => $possible_repository) {
                echo ' [' . ($i + 1) . "] $possible_repository\n";
            }

            $choice = readline('Repository: ');

            if (ctype_digit($choice) && 0 < (int) $choice && count($possible_repositories) > (int) $choice) {
                $selected_repository = $possible_repositories[(int) $choice - 1];
            } else {
                echo "Please pick a number between 1 and {count($possible_repositories}\n";
            }
        } while($selected_repository === null);
    }

    $loader->initFrom($selected_repository);
    $datastore->save();

    echo "Config has been added.\n";

    exit(0);
}

foreach ($datastore->configs() as $config) {
    $task_loader = new \Yannickl88\Server\TaskLoader();

    try {
        foreach ($task_loader->getTasks($config->getTasks()) as $task) {
            if (!$options['quiet']) {
                echo '  - Running task ', get_class($task), '...';
            }

            $task->run($config);

            if (!$options['quiet']) {
                echo " DONE\n";
            }
        }
    } catch (\Throwable $e) {
        if (!$options['quiet']) {
            echo " ERROR\n";
        }

        echo 'Error when processing config ' . $config->getIdentifier() . "\n\n",
            '[' . get_class($e) . ']',
            'Exception occured: ' . $e->getMessage() . "\n\n",
            $e->getTraceAsString() . "\n\n",
        "-----------------\n\n";
    } finally {
        $datastore->save();
    }
}
